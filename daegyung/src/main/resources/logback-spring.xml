<?xml version="1.0" encoding="UTF-8"?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">
  <property name="LOG_PATH" value="logs"/>
  <property name="LOG_PATTERN"
            value='{"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%highlight(%-5level)","thread":"[%thread]","traceId":"%X{traceId}","spanId":"%X{spanId}","logger":"%cyan(%logger{20}:%line)","message":"%msg"}%n'/>
  <property name="LOG_PATTERN"
            value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) --- [ %thread, %X{traceId}, %X{spanId} ] %cyan(%logger{20}:%line) : %msg%n"/>

  <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN}</pattern>
    </encoder>
  </appender>

  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 파일경로 설정 -->
    <file>${LOG_PATH}/info.log</file>

    <!-- 출력패턴 설정-->
    <!--        <encoder class="net.logstash.logback.encoder.LogstashEncoder"/>-->
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <pattern>
          <omitEmptyFields>true</omitEmptyFields>
          <pattern>
            {
            "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
            "logger": "%logger",
            "level": "%level",
            "requestIp": "%mdc{REQUEST_IP}",
            "thread": "%thread",
            "traceId": "%mdc{traceId}",
            "spanId": "%mdc{spanId}",
            "message": "%message"
            }
          </pattern>
        </pattern>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
            <maxDepthPerThrowable>30</maxDepthPerThrowable>
            <maxLength>2048</maxLength>
            <shortenedClassNameLength>20</shortenedClassNameLength>
            <exclude>^sun\.reflect\..*\.invoke</exclude>
            <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
            <rootCauseFirst>true</rootCauseFirst>
          </throwableConverter>
        </stackTrace>
      </providers>
    </encoder>

    <!-- Rolling 정책 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
      <fileNamePattern>${LOG_PATH}/info.%d{yyyy-MM-dd}_%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최고 용량 kb, mb, gb -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
      <maxHistory>30</maxHistory>
      <!--<MinIndex>1</MinIndex>
      <MaxIndex>10</MaxIndex>-->
    </rollingPolicy>
  </appender>

  <!-- 에러의 경우 파일에 로그 처리 -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${LOG_PATH}/error.log</file>
    <!--        <encoder class="net.logstash.logback.encoder.LogstashEncoder"/>-->
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <pattern>
          <omitEmptyFields>true</omitEmptyFields>
          <pattern>
            {
            "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
            "logger": "%logger",
            "level": "%level",
            "requestIp": "%mdc{REQUEST_IP}",
            "thread": "%thread",
            "traceId": "%mdc{traceId}",
            "spanId": "%mdc{spanId}",
            "message": "%message"
            }
          </pattern>
        </pattern>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
            <maxDepthPerThrowable>30</maxDepthPerThrowable>
            <maxLength>2048</maxLength>
            <shortenedClassNameLength>20</shortenedClassNameLength>
            <exclude>^sun\.reflect\..*\.invoke</exclude>
            <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
            <rootCauseFirst>true</rootCauseFirst>
          </throwableConverter>
        </stackTrace>
      </providers>
    </encoder>
    <!-- Rolling 정책 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
      <fileNamePattern>${LOG_PATH}/error.%d{yyyy-MM-dd}_%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최고 용량 kb, mb, gb -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
      <maxHistory>60</maxHistory>
    </rollingPolicy>
  </appender>

  <root level="info">
    <appender-ref ref="CONSOLE"/>
    <appender-ref ref="FILE"/>
    <appender-ref ref="ERROR"/>
  </root>
</configuration>
